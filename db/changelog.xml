<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">
    
    <changeSet id="schema and dict" author="ivanovr" runOnChange="false" >
		<sql><![CDATA[
		
CREATE SCHEMA long_task;		

CREATE TABLE long_task.task_state (
  id CHAR(2) NOT NULL,
  name VARCHAR(20) NOT NULL,
  CONSTRAINT task_state_pkey PRIMARY KEY(id)
) ;
		
CREATE TABLE long_task.period (
  id CHAR(3) NOT NULL,
  name VARCHAR(20) NOT NULL,
  ord SMALLINT NOT NULL,
  CONSTRAINT period_pkey PRIMARY KEY(id)
) ;

INSERT INTO long_task.task_state ("id", "name")
VALUES 
  (E'AC', E'cancelling'),
  (E'AE', E'executing'),
  (E'AW', E'waiting'),
  (E'CC', E'cancelled'),
  (E'CF', E'fail'),
  (E'CS', E'completed'),
  (E'DR', E'draft');

INSERT INTO long_task.period ("id", "name", "ord")
VALUES 
  (E'DAY', E'Day', 4),
  (E'HOU', E'Hour', 3),
  (E'MIN', E'Minute', 2),
  (E'MON', E'Month', 6),
  (E'SEC', E'Second', 1),
  (E'WEE', E'Week', 5);
  
		]]></sql> 	
	</changeSet>

    <changeSet id="functions" author="ivanovr" runOnChange="true" >
		<sqlFile path="long_task\functions\lock_worker.sql" relativeToChangelogFile="true" splitStatements="false" encoding="utf8" />
		<sqlFile path="long_task\functions\sched_start.sql" relativeToChangelogFile="true" splitStatements="false" encoding="utf8" />
		<sqlFile path="long_task\functions\start_task.sql" relativeToChangelogFile="true" splitStatements="false" encoding="utf8" />
		<sqlFile path="long_task\functions\task_aiud_tr.sql" relativeToChangelogFile="true" splitStatements="false" encoding="utf8" />
		<sqlFile path="long_task\functions\task_state_changed_tr.sql" relativeToChangelogFile="true" splitStatements="false" encoding="utf8" />
		<sqlFile path="long_task\functions\recover_worker_tasks.sql" relativeToChangelogFile="true" splitStatements="false" encoding="utf8" />
		<sqlFile path="long_task\functions\task_changed_notify.sql" relativeToChangelogFile="true" splitStatements="false" encoding="utf8" />
		<sqlFile path="long_task\functions\worker_changed_notify.sql" relativeToChangelogFile="true" splitStatements="false" encoding="utf8" />
	</changeSet>
		
    <changeSet id="task" author="ivanovr" runOnChange="false" >
		<sql><![CDATA[

CREATE TABLE long_task.task (
  id BIGSERIAL,
  params JSONB,
  state_id CHAR(2) DEFAULT 'DR'::bpchar NOT NULL,
  priority INTEGER DEFAULT 0 NOT NULL,
  group_id INTEGER DEFAULT 0 NOT NULL,  
  worker_id BIGINT,
  error TEXT,
  command VARCHAR [] NOT NULL, 
  started TIMESTAMP(0) WITH TIME ZONE,
  last_state_change TIMESTAMP(3) WITH TIME ZONE DEFAULT now() NOT NULL,
  created TIMESTAMP(0) WITH TIME ZONE DEFAULT now() NOT NULL,
  next_start TIMESTAMP(0) WITHOUT TIME ZONE,
  shed_period_id CHAR(3),
  shed_period_count INTEGER,
  shed_clone BOOLEAN DEFAULT false NOT NULL,
  CONSTRAINT task_pkey PRIMARY KEY(id),
  CONSTRAINT task_shed_period_fk FOREIGN KEY (shed_period_id)
    REFERENCES long_task.period(id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE,
  CONSTRAINT task_state_fk FOREIGN KEY (state_id)
    REFERENCES long_task.task_state(id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE
) ;

CREATE INDEX task_group_state_idx ON long_task.task
  USING btree (group_id, state_id COLLATE pg_catalog."default")
  WHERE (state_id ~~ 'A%'::text);

CREATE INDEX task_next_start_idx ON long_task.task
  USING btree (next_start);

CREATE INDEX task_state_idx ON long_task.task
  USING btree (state_id COLLATE pg_catalog."default");
  
CREATE TRIGGER task_aiud_tr
  AFTER INSERT OR UPDATE OF state_id, worker_id OR DELETE 
  ON long_task.task
FOR EACH ROW 
  EXECUTE PROCEDURE long_task.task_aiud_tr();

CREATE TRIGGER task_notify_iud_tr
  AFTER INSERT OR UPDATE OF state_id, next_start, shed_period_id, shed_period_count, group_id OR DELETE 
  ON long_task.task
FOR EACH ROW 
  EXECUTE PROCEDURE public.table_notify_iud();
  
		]]></sql> 	
	</changeSet>

	<changeSet id="task triggers" author="ivanovr" runOnChange="true" >
		<sqlFile path="long_task\triggers\task\task_aiud_tr.sql" relativeToChangelogFile="true" splitStatements="true" encoding="utf8" />
		<sqlFile path="long_task\triggers\task\task_state_changed_tr.sql" relativeToChangelogFile="true" splitStatements="true" encoding="utf8" />		
		<sqlFile path="long_task\triggers\task\task_changed_notify_tr.sql" relativeToChangelogFile="true" splitStatements="true" encoding="utf8" />
	</changeSet>
	
    <changeSet id="task comments" author="ivanovr" runOnChange="true" >
		<sql><![CDATA[	
		
COMMENT ON COLUMN long_task.task.params
IS 'Task parameters';

COMMENT ON COLUMN long_task.task.state_id
IS 'Status';

COMMENT ON COLUMN long_task.task.priority
IS 'Priority. Greater is less priorited';

COMMENT ON COLUMN long_task.task.group_id
IS 'Worker group';

COMMENT ON COLUMN long_task.task.worker_id
IS 'Worker that task is assigned to. NULL - not assigned yet';

COMMENT ON COLUMN long_task.task.error
IS 'Error text';

COMMENT ON COLUMN long_task.task.command
IS 'Run command. Use %TASK to substitute task.id';

COMMENT ON COLUMN long_task.task.started
IS 'When started (AW->AE)';

COMMENT ON COLUMN long_task.task.next_start
IS 'Next start time';

COMMENT ON COLUMN long_task.task.shed_period_id
IS 'Sheduled for period type';

COMMENT ON COLUMN long_task.task.shed_period_count
IS 'Sheduled period types count';

COMMENT ON COLUMN long_task.task.shed_clone
IS 'Clone task on run by scheduler';
	
		]]></sql> 	
	</changeSet>	
	
    <changeSet id="worker" author="ivanovr" runOnChange="false" >
		<sql><![CDATA[	
		
CREATE TABLE long_task.worker (
  id INTEGER NOT NULL,
  locked_until TIMESTAMP WITHOUT TIME ZONE,
  active BOOLEAN DEFAULT false NOT NULL,
  task_count INTEGER,
  group_id INTEGER,
  stop SMALLINT DEFAULT 0 NOT NULL,
  node_name VARCHAR,
  CONSTRAINT worker_pkey PRIMARY KEY(id)
) ;

		]]></sql> 	
	</changeSet>

	<changeSet id="worker triggers" author="ivanovr" runOnChange="true" >
		<sqlFile path="long_task\triggers\worker\worker_changed_notify_tr.sql" relativeToChangelogFile="true" splitStatements="true" encoding="utf8" />	
	</changeSet>
	
    <changeSet id="worker comments" author="ivanovr" runOnChange="true" >
		<sql><![CDATA[	
		
COMMENT ON COLUMN long_task.worker.locked_until
IS 'Lock is aquired until that time';

COMMENT ON COLUMN long_task.worker.active
IS 'Sets when lock is aquired firstly, unsets when unlocked. Worker is in fail state when locked_time<now() and active';

COMMENT ON COLUMN long_task.worker.task_count
IS 'Running task count on the node that locked the worker. Just for information';

COMMENT ON COLUMN long_task.worker.group_id
IS 'The worker group of the node that locked the worker. Just for information';

COMMENT ON COLUMN long_task.worker.stop
IS 'Stop request code (changing by the user):
0 - no request
1 - don`t run new tasks but current are not cancelled, don`t stop
2 - don`t run new tasks but current are not cancelled, stop when all tasks completed
3 - cancel all tasks then stop';

COMMENT ON COLUMN long_task.worker.node_name
IS 'Node name just for information';
	
		]]></sql> 	
	</changeSet>

	<changeSet id="28_10_2021" author="ivanovr" runOnChange="false" >
		<sql><![CDATA[			
DROP TRIGGER IF EXISTS task_notify_iud_tr ON long_task.task;
DROP TRIGGER IF EXISTS worker_notify_iud_tr ON long_task.worker;
		]]></sql> 	
	</changeSet>

	<changeSet id="SP descriptions" author="ivanovr" runOnChange="true" >
		<sql><![CDATA[			
COMMENT ON FUNCTION long_task.lock_worker(p_id bigint, p_group_id integer, p_node_name varchar, p_task_count integer, p_lock_until timestamp, p_prev_locked_until timestamp)
IS 'Aquires a lock on the worker.';		
		
COMMENT ON FUNCTION long_task.recover_worker_tasks(p_worker_id integer)
IS 'It is called by any node that detects another worker fail state to re-queue or cancel the worker`s executing tasks.';

COMMENT ON FUNCTION long_task.sched_start(p_id bigint)
IS 'Called on task.next_time to lunch the task.
Returns task.id queued. Returns NULL if the lunch must be skipped for now.';

COMMENT ON FUNCTION long_task.start_task(p_group_id integer, p_worker_id integer)
IS 'Select one of the waiting tasks to be executed by the worker.';
		]]></sql> 	
	</changeSet>

	<changeSet id="01_11_2021" author="ivanovr" runOnChange="false" >
		<sql><![CDATA[	
ALTER TABLE long_task.task ADD COLUMN IF NOT EXISTS cwd VARCHAR(260);
		]]></sql> 	
	</changeSet>

	<changeSet id="01_11_2021-2" author="ivanovr" runOnChange="true" >
		<sql><![CDATA[	
COMMENT ON COLUMN long_task.task.cwd
IS 'The root directory for processes being started absolute or relatively to config.root_dir';
		]]></sql> 	
	</changeSet>


		
</databaseChangeLog>

